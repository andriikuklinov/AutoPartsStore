// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Products.API.Data;

#nullable disable

namespace Products.API.Migrations
{
    [DbContext(typeof(ProductContext))]
    [Migration("20250507154950_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Products.API.Data.Entities.Characteristic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Characteristics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Voltage",
                            Unit = "V"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Capacity",
                            Unit = "Ah"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Width",
                            Unit = "cm"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Radius",
                            Unit = "cm"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Type"
                        });
                });

            modelBuilder.Entity("Products.API.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Accumulator",
                            Name = "Bosh 12v",
                            Price = 0m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Accumulator",
                            Name = "Varta 12v",
                            Price = 0m
                        },
                        new
                        {
                            Id = 3,
                            Description = "tire",
                            Name = "Tire R14",
                            Price = 0m
                        },
                        new
                        {
                            Id = 4,
                            Description = "tire 13",
                            Name = "Tire R13",
                            Price = 0m
                        });
                });

            modelBuilder.Entity("Products.API.Data.Entities.ProductCharacteristic", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CharacteristicId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId", "CharacteristicId");

                    b.HasIndex("CharacteristicId");

                    b.ToTable("ProductsCharacteristics");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CharacteristicId = 1,
                            Value = "12"
                        },
                        new
                        {
                            ProductId = 1,
                            CharacteristicId = 2,
                            Value = "100"
                        },
                        new
                        {
                            ProductId = 1,
                            CharacteristicId = 5,
                            Value = "AGM"
                        },
                        new
                        {
                            ProductId = 2,
                            CharacteristicId = 1,
                            Value = "24"
                        },
                        new
                        {
                            ProductId = 2,
                            CharacteristicId = 2,
                            Value = "200"
                        },
                        new
                        {
                            ProductId = 2,
                            CharacteristicId = 5,
                            Value = "AGM"
                        },
                        new
                        {
                            ProductId = 3,
                            CharacteristicId = 3,
                            Value = "20"
                        },
                        new
                        {
                            ProductId = 3,
                            CharacteristicId = 4,
                            Value = "14"
                        },
                        new
                        {
                            ProductId = 4,
                            CharacteristicId = 3,
                            Value = "20"
                        },
                        new
                        {
                            ProductId = 4,
                            CharacteristicId = 4,
                            Value = "18"
                        });
                });

            modelBuilder.Entity("Products.API.Data.Entities.ProductCharacteristic", b =>
                {
                    b.HasOne("Products.API.Data.Entities.Characteristic", "Characteristic")
                        .WithMany("ProductCharacteristics")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Products.API.Data.Entities.Product", "Product")
                        .WithMany("ProductCharacteristics")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Characteristic");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Products.API.Data.Entities.Characteristic", b =>
                {
                    b.Navigation("ProductCharacteristics");
                });

            modelBuilder.Entity("Products.API.Data.Entities.Product", b =>
                {
                    b.Navigation("ProductCharacteristics");
                });
#pragma warning restore 612, 618
        }
    }
}
